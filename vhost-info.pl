#!/usr/bin/perl
use warnings;
use strict;

use Apache::Admin::Config;
use App::Info::HTTPD::Apache;
use Getopt::Std;
use File::Basename;
use File::Spec;
use Filesys::DiskUsage qw/du/;
use Sys::Hostname;

$main::VERSION = "0.1";
$Getopt::Std::STANDARD_HELP_VERSION = 1;
our($opt_d, $opt_s, $opt_a);
getopts('dsa');

# Check for the current httpd.conf file in use
my $apache = App::Info::HTTPD::Apache->new;
my $main_conf = new Apache::Admin::Config( $apache->conf_file );

# Grab the global document root/ default for the server
# and start off the DocumentRoots hash with it.
(my $ServerRoot = $main_conf->directive('DocumentRoot')) =~ s/\"//g;

my %DocumentRoots = ($ServerRoot => 1);

# We're going to be examining all of the included .conf files
my @all_conf = ($apache->conf_file, map {glob($_)} $main_conf->directive('Include'));
map { $_ = File::Spec->rel2abs($_, $apache->httpd_root) } grep { m/\.conf/ } @all_conf;

# Print some summary information.
printf "%15s %s\n%15s %s\n%15s %s\n%15s %s\n\n",
 "Generated by:", getlogin(),
 "Using script:", File::Spec->rel2abs($0),
 "on date:", scalar localtime,
 "for server:", hostname;

for (@all_conf) {

    my $conf = new Apache::Admin::Config($_);
    print "\nConf file: $_\n";

    print " " x 11, "No VirtualHost entries in this file.\n\n" unless $conf->section('VirtualHost');

    foreach($conf->section('VirtualHost')) {
        printf "%15s: %s\n",$_->name,$_->directive('ServerName')->value if defined $_->directive('ServerName');

        foreach($_->directive('ServerAlias')) {
            printf "%15s: %s\n","Alias",$_->value;
        }

        my $DR = $_->directive('DocumentRoot') ? File::Spec->canonpath($_->directive('DocumentRoot')) : 'None';

        printf "%15s: %s\n", "DocumentRoot", $DR;

        $DocumentRoots{$DR}++;

        if ($DR eq 'None') {
            foreach my $direc ($_->directive()){
                printf "%15s: %s\n",$direc->name,$direc->value
                  unless ($direc->name eq 'ServerName' || $direc->name eq 'ServerAlias');
            }
        } elsif ( -d $DR ) {
            if ($DocumentRoots{$DR} == 1) {
                printf("%15s: %s\n", "Dir Size", du {'Human-readable' => 1}, $DR ) if $opt_s or $opt_a;
                system("cd $DR && drush status") if $opt_d or $opt_a; # Checks for drupal install
            }
        } else {
            printf "%15s: %s\n", "***Warning***", "DocumentRoot does not exist!";
            $DocumentRoots{$DR}--;  # Decrement to put the entry at the bottom of the list when printing.
                                    #   Comment out if you want to know how many sites depend on this folder
        }
        print "\n";
    }
}

print "\nDocument Roots to be aware of:\n\n";
foreach (sort {$DocumentRoots{$b} <=> $DocumentRoots{$a} or $a cmp $b} keys %DocumentRoots)
{
    #printf "%2d site%s using %s\n", $DocumentRoots{$_}, ($DocumentRoots{$_} == 1) ? ' ' : 's', $_;
    printf "$_ %s\n", (!-d $_) ? "(Does not exist)" : "" unless $_ eq "None";
}

sub HELP_MESSAGE() {
  print "Usage: ".basename($0)." [OPTIONS]\n";
  print "  The following options are accepted:\n\n";
  print "\t-s\tDisplay the size of each DocumentRoot and all subdirs\n\n";
  print "\t-d\tDisplay the status of a Drupal by running \"drush status\" in each DocumentRoot\n\n";
  print "\t-a\tPerform all of the above. Overrides any other option specified\n\n";
  print "Options may be merged together. (Though at this point it'd be kind of pointless. :-p )\n\n";
}
sub VERSION_MESSAGE() {
  print basename($0)." - version $main::VERSION\n";
}
